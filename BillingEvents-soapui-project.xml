<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="32dca26e-8530-48f0-98be-d7bd7b0b2430" activeEnvironment="Default" name="BillingEvents" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="f1f0580e-46e1-4481-8002-b880fdbe72f3" port="8080" path="/" host="Laptop-Reeja" name="BillingEventsMock"><con:settings/><con:properties/><con:restMockAction name="/invoices" method="GET" resourcePath="/invoices" id="2e7fcd62-a7b1-4ef1-9249-7648f72eecee"><con:settings/><con:defaultResponse>AllInvoices</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="AllInvoices" id="2ed07aa1-d9d8-4edb-8f8d-91b9dc66cefa" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"invoices" : { 
		"invoice" : [{
			"sourceName": "BC12CUST01",
			"sourceRef" : "001"
		},{
			"sourceName": "BC12CUST02",
			"sourceRef" : "002"
		},{
			"sourceName": "BC12CUST03",
			"sourceRef" : "003"
		}]
	}
}</con:responseContent><con:header><con:name>Invoice</con:name><con:value>all</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/invoices/sourceRef/001" method="GET" resourcePath="/invoices/sourceRef/001" id="4705eb98-3975-40d8-a1d1-c5bccb3018e9"><con:settings/><con:defaultResponse>Invoice-001</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Invoice-001" id="840fc561-b2ca-4091-8f34-f605bda72945" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"invoices" : { 
		"invoice" : [{
			"sourceName": "BC12CUST01",
			"sourceRef" : "001"
		}
	}
}</con:responseContent><con:header><con:name>Invoice</con:name><con:value>001</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/invoices" method="POST" resourcePath="/invoices" id="602cfd86-e2e9-4dc6-aca6-8190b4b75d93"><con:settings/><con:defaultResponse>addInvoice</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="addInvoice" id="4878396f-57a9-465b-a835-f4a17b25f9e2" httpResponseStatus="200"><con:settings/><con:script>context.setProperty("sourceRef",Math.random())
context.setProperty("sourceName",Math.random()+"CUS"+Math.random())</con:script><con:responseContent>{
	"invoices" : { 
		"invoice" : [{
			"sourceName": ${sourceName},
			"sourceRef" : ${sourceRef}
		}]
	}
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/invoice" method="GET" resourcePath="/invoice" id="3b3eb621-0c58-4f3e-8cff-eb4adb9d590f"><con:settings/><con:defaultResponse>400</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="400" id="557d6d3c-98df-4a68-bb62-221a02608079" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>