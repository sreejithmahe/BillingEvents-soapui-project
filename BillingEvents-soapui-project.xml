<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="32dca26e-8530-48f0-98be-d7bd7b0b2430" activeEnvironment="Default" name="BillingEvents" resourceRoot="" soapui-version="5.2.1" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="f1f0580e-46e1-4481-8002-b880fdbe72f3" port="8080" path="/" host="Laptop-Reeja" name="BillingEventsMock"><con:settings/><con:properties/><con:restMockAction name="/invoices" method="GET" resourcePath="/invoices" id="2e7fcd62-a7b1-4ef1-9249-7648f72eecee"><con:settings/><con:defaultResponse>AllInvoices</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="AllInvoices" id="2ed07aa1-d9d8-4edb-8f8d-91b9dc66cefa" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"invoices" : { 
		"invoice" : [{
			"SourceName"  			:	"BS12CUS01",
			"SourceReference"		:	"000000001",
			"ContractNumber" 		:	"8898688889",
			"ContractLineNumber"	:	"(84)(3737389)",
			"EventTypeName"			:	"EvN097_76",
			"EventDescription"		:	"767393937",
			"CompletionDate"		:	"2017-09-11",
			"BillTrnsCurrency"		:	"USD",
			"BillTransAmount"		:	17837,
			"billingEventDFF"		:	[ { "ID"	: 17001,
                                			"Value"	: 82379
                              			},
							  			{ 	"ID"	: 11001,
                              			  	"Value"	: 82379
                              			},
							  			{ 	"ID"	: 15001,
                                			"Value"	: 82379
                              			}
                            			] 
		},{
			"SourceName"  			:	"BS12CUS02",
			"SourceReference"		:	"000000002",
			"ContractNumber" 		:	"8898674889",
			"ContractLineNumber"	:	"(84)(3737389)",
			"EventTypeName"			:	"EvN097_75",
			"EventDescription"		:	"767393937",
			"CompletionDate"		:	"2017-11-21",
			"BillTrnsCurrency"		:	"USD",
			"BillTransAmount"		:	17437,
			"billingEventDFF"		:	[ { "ID"	: 18001,
                                			"Value"	: 82379
                              			},
							  			{ 	"ID"	: 14001,
                              			  	"Value"	: 82379
                              			},
							  			{ 	"ID"	: 18001,
                                			"Value"	: 82379
                              			}
                            			]
		},{
			"SourceName"  			:	"BS12CUS03",
			"SourceReference"		:	"000000003",
			"ContractNumber" 		:	"8898687789",
			"ContractLineNumber"	:	"(84)(3737389)",
			"EventTypeName"			:	"EvN097_76",
			"EventDescription"		:	"767393937",
			"CompletionDate"		:	"2017-05-10",
			"BillTrnsCurrency"		:	"USD",
			"BillTransAmount"		:	11835,
			"billingEventDFF"		:	[ { "ID"	: 12001,
                                			"Value"	: 83379
                              			},
							  			{ 	"ID"	: 15001,
                              			  	"Value"	: 84379
                              			},
							  			{ 	"ID"	: 13001,
                                			"Value"	: 12379
                              			}
                            			]
		}]
	}
}</con:responseContent><con:header><con:name>Invoice</con:name><con:value>all</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/invoices/sourceRef/000000001" method="GET" resourcePath="/invoices/sourceRef/000000001" id="4705eb98-3975-40d8-a1d1-c5bccb3018e9"><con:settings/><con:defaultResponse>Invoice-001</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Invoice-000000001" id="840fc561-b2ca-4091-8f34-f605bda72945" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
	"invoices" : { 
		"invoice" : [{
			"SourceName"  			:	"BS12CUS01",
			"SourceReference"		:	"000000001",
			"ContractNumber" 		:	"8898688889",
			"ContractLineNumber"	:	"(84)(3737389)",
			"EventTypeName"			:	"EvN097_76",
			"EventDescription"		:	"767393937",
			"CompletionDate"		:	"2017-09-11",
			"BillTrnsCurrency"		:	"USD",
			"BillTransAmount"		:	17837,
			"billingEventDFF"		:	[ { "ID"	: 17001,
                                			"Value"	: 82379
                              			},
							  			{ 	"ID"	: 11001,
                              			  	"Value"	: 82379
                              			},
							  			{ 	"ID"	: 15001,
                                			"Value"	: 82379
                              			}
                            			] 
		}]
	}
}</con:responseContent><con:header><con:name>Invoice</con:name><con:value>001</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/invoices" method="POST" resourcePath="/invoices" id="602cfd86-e2e9-4dc6-aca6-8190b4b75d93"><con:settings/><con:defaultResponse>addInvoice</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="addInvoice" id="4878396f-57a9-465b-a835-f4a17b25f9e2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>context.setProperty("sourceRef",Math.random())
context.setProperty("sourceName",Math.random()+"CUS"+Math.random())</con:script><con:responseContent>{
	"invoices" : { 
		"invoice" : [{
			"SourceName"  			:	${sourceName},
			"SourceReference"		:	${sourceRef},
			"ContractNumber" 		:	"8898688889",
			"ContractLineNumber"	:	"(84)(3737389)",
			"EventTypeName"			:	"EvN097_76",
			"EventDescription"		:	"767393937",
			"CompletionDate"		:	"2017-09-11",
			"BillTrnsCurrency"		:	"USD",
			"BillTransAmount"		:	17837,
			"billingEventDFF"		:	[ { "ID"	: 17001,
                                			"Value"	: 82379
                              			},
							  			{ 	"ID"	: 11001,
                              			  	"Value"	: 82379
                              			},
							  			{ 	"ID"	: 15001,
                                			"Value"	: 82379
                              			}
                            			] 
		}]
	}
}</con:responseContent><con:header><con:name>AddInvoice</con:name><con:value>000000011</con:value></con:header></con:response></con:restMockAction><con:restMockAction name="/invoice" method="GET" resourcePath="/invoice" id="3b3eb621-0c58-4f3e-8cff-eb4adb9d590f"><con:settings/><con:defaultResponse>400</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="400" id="557d6d3c-98df-4a68-bb62-221a02608079" httpResponseStatus="400" mediaType="application/json"><con:settings/><con:responseContent>BAD Request</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/invoices/sourceRef/" method="GET" resourcePath="/invoices/sourceRef/" id="921e08f7-6eac-448a-9d3e-061af1fd24d1"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="400" id="e0f04b4a-0e69-4bdb-a187-420c96f2a9d8" httpResponseStatus="400"><con:settings/><con:responseContent>BAD Request</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/invoices/*" method="GET" resourcePath="/invoices/" id="519c5f2a-74cf-4f34-84f1-9e157ac9b96b"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="400" id="5c8ba641-8bf2-490c-9bf6-e918651a878d" httpResponseStatus="400"><con:settings/><con:responseContent>BAD Request</con:responseContent><con:header><con:name>status</con:name><con:value>400</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>